import tkinter as tk
from tkinter import messagebox

class LightingModule:
    def __init__(self):
        self.light_intensities = [0, 25, 50, 75, 100]  # Sample list of light intensities
        self.current_intensity_index = 0
        self.is_light_on = False

    def set_light_intensity(self, intensity_index):
        if 0 <= intensity_index < len(self.light_intensities):
            self.current_intensity_index = intensity_index
            print(f"Light intensity set to {self.light_intensities[self.current_intensity_index]}%")
        else:
            print("Invalid intensity index")

    def get_light_intensity(self):
        return self.light_intensities[self.current_intensity_index]

    def toggle_light(self):
        if self.is_light_on:
            self.turn_off()
        else:
            self.turn_on()

    def turn_on(self):
        self.is_light_on = True
        root.config(bg="green")  # Change window background to green when lights are turned on
        print("Lights turned on in the building.")

    def turn_off(self):
        self.is_light_on = False
        if not emergency.get_emergency_state():
            root.config(bg="white")  # Change window background to white when lights are turned off unless emergency ongoing
        print("Lights turned off in the building.")


class EmergencyModule:
    def __init__(self):
        self.emergency_state = False
        self.alarms_activated = False
        self.safety_systems_activated = False

    def trigger_emergency(self):
        self.emergency_state = True
        self.alarms_activated = True
        self.safety_systems_activated = True
        root.config(bg="red")  # Change window background to red
        messagebox.showwarning("Emergency Triggered", "Emergency triggered. Alarms and safety systems activated.")

    def resolve_emergency(self):
        self.emergency_state = False
        self.alarms_activated = False
        self.safety_systems_activated = False
        if not lighting.is_light_on:
            root.config(bg="white")  # Change window background to white if lights are off
        messagebox.showinfo("Emergency Resolved", "Emergency resolved. Alarms and safety systems deactivated.")

    def get_emergency_state(self):
        return self.emergency_state

# Create instances of LightingModule and EmergencyModule
lighting = LightingModule()
emergency = EmergencyModule()

# Tkinter GUI
def set_light_intensity():
    try:
        intensity_index = int(entry_intensity.get())
        lighting.set_light_intensity(intensity_index)
        messagebox.showinfo("Success", f"Light intensity set to {lighting.get_light_intensity()}%")
    except ValueError:
        messagebox.showerror("Error", "Please enter a valid intensity index.")

def toggle_light():
    lighting.toggle_light()
    messagebox.showinfo("Success", "Lights toggled in the building.")

def trigger_emergency_gui():
    emergency.trigger_emergency()

def resolve_emergency_gui():
    emergency.resolve_emergency()

# GUI setup
root = tk.Tk()
root.title("Building Automation System")

label_intensity = tk.Label(root, text="Set Light Intensity (0-4):")
label_intensity.pack()

entry_intensity = tk.Entry(root)
entry_intensity.pack()

button_set_intensity = tk.Button(root, text="Set Intensity", command=set_light_intensity)
button_set_intensity.pack()

button_toggle_light = tk.Button(root, text="Toggle Light", command=toggle_light)
button_toggle_light.pack()

button_trigger_emergency = tk.Button(root, text="Trigger Emergency", command=trigger_emergency_gui)
button_trigger_emergency.pack()

button_resolve_emergency = tk.Button(root, text="Resolve Emergency", command=resolve_emergency_gui)
button_resolve_emergency.pack()

root.mainloop()
